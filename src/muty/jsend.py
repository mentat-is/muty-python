"""
This module contains classes and functions for working with JSend responses.
JSend is a specification for building JSON APIs that respond in a consistent format.
For more information, see https://github.com/omniti-labs/jsend.
"""

import json
import time
from typing import Literal, Optional

from pydantic import BaseModel, Field
from starlette.responses import JSONResponse

import muty.log
import muty.string

_logger = muty.log.internal_logger()

API_DESC_REQID = (
    "request-id (will be replicated in the response), leave empty to autogenerate."
)


class JSendException(Exception):
    """
    Exception class for JSend errors.

    Attributes:
        req_id (str): The ID of the request that caused the error.
        status_code (int): The HTTP status code to return for the error.
        err (str): The error message.
        js (dict): The JSend error response.
    """

    def __init__(
        self,
        err: str = None,
        ex: Exception = None,
        req_id: str = None,
        status_code: int = 500,
    ):
        self.req_id = req_id
        self.status_code = status_code
        self.err = err
        self.ex = ex
        self.js = error_jsend(req_id, err, ex)

        msg: str = None
        if err is not None:
            msg = err
        elif ex is not None:
            msg = str(ex)
        else:
            msg = "ERROR!"

        super().__init__(msg)


class JSendResponse(BaseModel):
    """
    Model for responses
    """

    status: str = Literal["success", "pending", "error", "fail"]
    req_id: str = Field(
        openapi_examples={"example": {"value": "the_request_id"}},
        description=API_DESC_REQID,
    )
    timestamp_msec: int = Field(
        openapi_examples={"example": {"value": 1692870496556}},
        description="response timestamp in msec since unix epoch.",
    )
    data: Optional[dict] = Field(
        default=None,
        openapi_examples={
            "example": {
                "summary": "a dict (layout is API dependendent)",
                "value": {"results": []},
            }
        },
        description="on success, the result itself.",
    )


def check_success(js: dict, pending_is_success: bool = True) -> bool:
    """
    Checks if a JSend response is successful.

    Args:
        js (dict): The JSend response.
        pending_is_success (bool): Whether pending status should be considered as success. Defaults to True.

    Returns:
        bool: True if the response is successful, False otherwise.
    """
    if js is None:
        return False
    res = js.get("status", None)
    if res is None:
        return False

    if str(res).lower() == "success":
        return True
    if pending_is_success:
        if str(res).lower() == "pending":
            return True

    return False


def success_jsend(req_id: str = None, data: dict = None) -> dict:
    """
    Creates a JSend successful dict, optionally with the given "data" node.

    Args:
        req_id (str): The request ID, autogenerated if not provided.
        data (dict): The data of the response (should contain the result itself, dict layout is API dependent). Defaults to None.

    Returns:
        dict: The JSend successful response.
    """
    js = {"status": "success"}
    js["timestamp_msec"] = int(time.time_ns() / 1000000)
    js["req_id"] = ensure_req_id(req_id)
    if data is not None:
        js["data"] = data

    _logger.info(json.dumps(js, indent=2))
    return js


def pending_jsend(req_id: str) -> dict:
    """
    Creates a JSend pending dict.

    Args:
        req_id (str): The request ID, autogenerated if not provided.

    Returns:
        dict: The JSend pending response.
    """
    js = {"status": "pending"}
    js["timestamp_msec"] = int(time.time_ns() / 1000000)
    js["req_id"] = ensure_req_id(req_id)

    _logger.info(json.dumps(js, indent=2))
    return js


def error_jsend(
    req_id: str = None,
    err: str | dict = None,
    ex: Exception = None,
    file: str = None,
    data: dict = None,
) -> dict:
    """
    Returns a dictionary in JSend format with an error status.

    Args:
        req_id (str): The request ID, autogenerated if not provided.
        err (str or dict, optional): The error message or dictionary. Defaults to None.
        ex (Exception, optional): The exception object. Defaults to None.
        file (str, optional): The file name or path which caused the error. Defaults to None.
        data (dict, optional): custom data to be added to the response. Defaults to None.
    Returns:
        dict: A dictionary in JSend format with an error status.
    """

    js = {"status": "error"}
    js["req_id"] = ensure_req_id(req_id)
    js["timestamp_msec"] = int(time.time_ns() / 1000000)
    if data is not None:
        js["data"] = data
    else:
        js["data"] = {}
    d = js["data"]

    if file is not None:
        d["file"] = file
    if err is not None:
        # custom error
        d["error"] = err
    if ex is not None:
        # exception info
        d["exception"] = {
            "name": ex.__class__.__name__,
            "msg": str(ex),
            "trace": muty.log.exception_to_string(ex, with_full_traceback=True),
        }

    _logger.error(json.dumps(js, indent=2))
    return js


def ensure_req_id(req_id: str = None) -> str:
    """
    Ensures a request ID is not None, either returns a new one.

    Args:
        req_id (str, optional): The request ID. Defaults to None.

    Returns:
        str: The request ID.
    """
    if req_id is None:
        return muty.string.generate_unique()
    return req_id


def fastapi_jsend_exception_handler(
    ex: JSendException, status_code: int = None
) -> JSONResponse:
    """
    Exception handler for FastAPI apps using this JSend responses format.

    Args:
        ex (JSendException): The JSend exception.
        status_code (int, optional): overrides the status code in ex if set. Defaults to None.
    Returns:
        JSONResponse: The JSON response.
    """
    return JSONResponse(
        status_code=ex.status_code if status_code is None else status_code,
        content=ex.js,
    )
